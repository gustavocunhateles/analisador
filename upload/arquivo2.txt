import React, { Component } from 'react';
import axios from 'axios';
import {Progress} from 'reactstrap';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Select from 'react-select'
//import FileInput from 'react-file-input'
//FileInput = require('react-file-input');

const dir = "./upload";
const array = new FormData() 

for(var x = 0; x<dir.length; x++) {
  array.append(null, dir[x].originalname)
}

const options = [
  { value: 'arquivo1', label: 'arquivo1' },
  { value: 'arquivo2', label: 'arquivo2' },
  { value: 'arquivo3', label: 'arquivo3' },
];

class App extends Component {
  
  constructor(props) {
    super(props);
      this.state = {
        selectedFile: null,
        selectedOption: null,
        loaded:0
      }
  }

  checkMimeType=(event)=>{
    let files = event.target.files 
    let err = []
    const types = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'text/html']
    for(var x = 0; x<files.length; x++) {
         if (types.every(type => files[x].type !== type)) {
         err[x] = 'O sistema não analisa arquivos do tipo ' + files[x].type;
       }
     };
     for(var z = 0; z<err.length; z++) {
        toast.error(err[z])
        event.target.value = null
    }
   return true;
  }
  
  maxSelectFile=(event)=>{
      let files = event.target.files
          if (files.length > 3) { 
            const msg = 'Selecione apenas 3 arquivos!'
            event.target.value = null
            toast.warn(msg)
            return false;
        }
      return true;
  }

  checkFileSize=(event)=>{
    let files = event.target.files
    let size = 99999999999999 
    let err = []; 
    for(var x = 0; x<files.length; x++) {
      if (files[x].size > size) {
        err[x] = files[x].type+' é muito grande, escolha um menor!\n';
      }
    };
    for(var z = 0; z<err.length; z++) {
      // discard selected file
      toast.error(err[z])
      event.target.value = null
    }
    return true;
  }

  onChangeHandler=event=>{
    var files = event.target.files
    if(this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)){ 
    // if return true allow to setState
      this.setState({
      selectedFile: files,
      loaded:0
      })
    }
  }

  handleChange=event=>{
    var options = event.target
    this.setState({
      selectedOption: options,
      loaded:0
    })
    
  } 
  
  upload = () => {
    
    const data = new FormData() 

    if(this.state.selectedFile === null){
      toast.error('Selecione o arquivo!')
    }
    
    else{
      
      for(var x = 0; x<this.state.selectedFile.length; x++) {
        data.append('file', this.state.selectedFile[x])
      }
      axios.post("http://localhost:8000/upload", data, {
        onUploadProgress: ProgressEvent => {
          this.setState({
            loaded: (ProgressEvent.loaded / ProgressEvent.total*100),
          })
        },
      })
      .then(res => { 
        toast.success('Upload realizado com sucesso!')
      })
      .catch(err => { 
        toast.error('Falha no upload! ' + err)
      })
    }

  }
  
  retornaLista = (array, format) => {
    
    var count = 0;
    var lista = [''];

    for(var i = 0; i<array.length; i++) {
      if ( format.test(array[i]) ){
        count++;
        if(count === 1){
          lista += array[i] 
        }
        else{
          lista += ', ' + array[i] 
        }    
      }
    }

    return lista;

  }

  read = () => {

    const data = new FormData() 
    const strings = ['192.168.1.1', 'hostname', '192.168.1.3', '192.168.1.4', '1.1', 'ipteste', '999.999.999.999',
                    'C1234567', 'C1234567-8', 'E3877678', 'E3877678-2', 'F3877678', 'F3877678-2', 'Z1234567', 'Z1234567-8',
                    '<!-- Comentário em html -->', '<!-- Não é comentário em html --', '// Comentário em Java', '/* Comentário em Java */', '/ Não é um comentário em Java']
    var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    var matriculaFormat = /^([c|C][0-9]{7}|[c|C][0-9]{7}[-][0-9]|[e|E][0-9]{7}|[e|E][0-9]{7}[-][0-9]|[f|F][0-9]{7}|[f|F][0-9]{7}[-][0-9]|[z|Z][0-9]{7}|[z|Z][0-9]{7}[-][0-9])$/; 
    /* var comentFormat = new RegExp (['/^(',
                        '[<][!][-][-].*.[-][-][>]',
                        '|',
                        '[/][/].*$|[/][*].*$',
                        ')$/']
                        .join('')); */
    var comentFormat = /^([<][!][-][-].*.[-][-][>]|[/][/].*$|[/][*].*$)$/
    var listaIps = ['']
    var listaMatriculas = ['']
    var listaComent = ['']
    var countIps = 0;
    var countMatriculas = 0;
    var countComent = 0;

    if(strings){

      var l = strings.length

      for(var i = 0; i<l; i++) {
        if ( ipformat.test(strings[i]) ){
          countIps++;
          if(countIps === 1){
            listaIps += strings[i] 
          }
          else{
            listaIps += ', ' + strings[i] 
          }    
        }
      }
  
      for(var x = 0; x<l; x++) {    
        if ( matriculaFormat.test(strings[x]) ){
          countMatriculas++;
          if(countMatriculas === 1){
            listaMatriculas += strings[x] 
          }
          else{
            listaMatriculas += ', ' + strings[x] 
          }    
        }
      }
  
      for(var y = 0; y<l; y++) {
        if ( comentFormat.test(strings[y]) ){
          countComent++;  
          if(countComent === 1){
            listaComent += strings[y] 
          }
          else{
            listaComent += ', ' + strings[y] 
          }                   
        }
      } 

    }

    if(this.state.selectedOption === null){
      toast.error('Selecione o arquivo!')
    }
    
    else{     
      axios.post("http://localhost:8000/read", data)
      .then(res => { 
        countIps === 0 ?
          //não existe ip
          countMatriculas === 0 ? 
            //não existe matrícula
            countComent === 0 ? 
              //não existe comentário
              toast.success('Análise realizada com sucesso!\nNão há informações para os filtros aplicados!')
              :
              //existe apenas comentário
              toast.success('Análise realizada com sucesso! '
              + countComent + ' Comentários identificados: ' + listaComent + '.')
            :
            countComent === 0 ? 
              //existe apenas matrícula
              toast.success('Análise realizada com sucesso! ' 
              + countMatriculas + ' Matrículas identificadas: ' + listaMatriculas + '. ')  
              :
              //existem matrícula e comentário
              toast.success('Análise realizada com sucesso! '              
              + countMatriculas + ' Matrículas identificadas: ' + listaMatriculas + '. '
              + countComent + ' Comentários identificados: ' + listaComent + '.')  
          : 
          //existe ip
          countMatriculas !== 0 ?
            //existe matrícula
            countComent !== 0 ? 
              //existe comentário
              toast.success('Análise realizada com sucesso! ' 
              + countIps +' Ips identificados: ' + listaIps + '. '
              + countMatriculas + ' Matrículas identificadas: ' + listaMatriculas + '. '
              + countComent + ' Comentários identificados: ' + listaComent + '.')
              :
              //não existe comentário
              toast.success('Análise realizada com sucesso! ' 
              + countIps +' Ips identificados: ' + listaIps + '. '
              + countMatriculas + ' Matrículas identificadas: ' + listaMatriculas + '. ')
            :
            //não existe matrícula  
            countComent === 0 ?  
              //não existe comentário
              toast.success('Análise realizada com sucesso! ' 
              + countIps +' Ips identificados: ' + listaIps + '. ')
              :
              //existe comentário
              toast.success('Análise realizada com sucesso! ' 
              + countIps +' Ips identificados: ' + listaIps + '. '             
              + countComent + ' Comentários identificados: ' + listaComent + '.')
      })
      .catch(err => { 
        toast.error('Falha na análise! ' + err)
      })
    }
  }

  render() {

    const { selectedOption } = this.state;

    return (
      <div class="container">
	      <div class="row">
          
          <div class="offset-md-2 col-md-8">
            <br></br> <br></br> <br></br> 
          </div>

      	  <div class="offset-md-2 col-md-8">
            
            <center> <h2> Upload de Arquivos </h2> </center>           
            <br></br>
            
            <div class="form-group files">
              <input type="file" class="form-control" placeholder={"Selecione do pc ou solte aqui"} multiple onChange={this.onChangeHandler}/>
            </div>  
            
            <div class="form-group">
              <ToastContainer />
              <Progress max="100" color="success" value={this.state.loaded} >{Math.round(this.state.loaded,2) }%</Progress>      
            </div> 
              
            <button type="button" class="btn btn-success btn-block" onClick={this.upload}>Upload</button>

	        </div>
          
          <div class="offset-md-2 col-md-8">
            <br></br> <br></br> <hr></hr> <br></br> 
          </div>
          
          <div class="offset-md-2 col-md-8">

            <center> <h2> Analisador de Arquivos </h2> </center>
            
            <br></br>
            
            <div class="form-group">
              <Select
                value={selectedOption}
                onChange={this.handleChange}
                options={options} 
                placeholder={""}   
              />
              <br></br>
              <button type="button" class="btn btn-success btn-block" onClick={this.read}>Analisar</button>
            </div>

	        </div>

        </div>
      </div>
    );
  }
}

export default App;
